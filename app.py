import streamlit as st
from database.database import SessionLocal, init_db
from models.models import Project, Thread, Message
from api.gemini_client import GeminiClient
import datetime
from google.genai import types
import logging # logging „Çí„Ç§„É≥„Éù„Éº„Éà
from utils.markdown_export import export_message_to_markdown # <-- „Ç§„É≥„Éù„Éº„Éà„ÇíËøΩÂä†
from database.crud import search_messages, delete_thread, update_thread_name, delete_project # <-- delete_project „Çí„Ç§„É≥„Éù„Éº„Éà
from sqlalchemy import func

# logging „ÅÆÂü∫Êú¨Ë®≠ÂÆö
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# --- „Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ ---
init_db()

# --- „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ ---
if "current_project_id" not in st.session_state:
    st.session_state.current_project_id = None
if "current_thread_id" not in st.session_state:
    st.session_state.current_thread_id = None
if "search_results" not in st.session_state:
    st.session_state.search_results = None # Ê§úÁ¥¢ÁµêÊûú„ÇíÊ†ºÁ¥ç
if "show_search_results" not in st.session_state:
    st.session_state.show_search_results = False # Ê§úÁ¥¢ÁµêÊûúË°®Á§∫„É¢„Éº„Éâ„ÅÆ„Éï„É©„Ç∞

# --- ÂÆöÊï∞ --- # „É¢„Éá„É´„É™„Çπ„Éà„ÇíÂÆöÁæ©
AVAILABLE_MODELS = [
    "gemini-2.0-flash", 
    "gemini-2.0-flash-thinking-exp-01-21",
    "gemini-2.0-pro-exp-02-05", 
    "gemini-2.5-pro-exp-03-25"
]

# --- „Çµ„Ç§„Éâ„Éê„Éº --- 
st.sidebar.title("Gemini Search Chat")

# --- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ --- 
st.sidebar.header("„Éó„É≠„Ç∏„Çß„ÇØ„Éà")

db = SessionLocal()
try:
    projects = db.query(Project).order_by(Project.name).all()
    project_names = [p.name for p in projects]
    project_map = {p.name: p.id for p in projects}

    # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû
    selected_project_name = st.sidebar.selectbox(
        "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈÅ∏Êäû", 
        project_names,
        index=project_names.index(next((p.name for p in projects if p.id == st.session_state.current_project_id), None)) if st.session_state.current_project_id and any(p.id == st.session_state.current_project_id for p in projects) else 0,
    )

    if selected_project_name:
        # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÂàá„ÇäÊõø„Çè„Å£„Åü„Çâ„Çπ„É¨„ÉÉ„ÉâÈÅ∏Êäû„ÇÇ„É™„Çª„ÉÉ„Éà
        if st.session_state.current_project_id != project_map[selected_project_name]:
             st.session_state.current_thread_id = None 
        st.session_state.current_project_id = project_map[selected_project_name]

    else:
        st.session_state.current_project_id = None
        st.session_state.current_thread_id = None

    # Êñ∞Ë¶è„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê
    with st.sidebar.expander("Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê"): 
        new_project_name = st.text_input("„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç")
        new_system_prompt = st.text_area("„Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà", value="„ÅÇ„Å™„Åü„ÅØÂΩπÁ´ã„Å§„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ")
        # „É¢„Éá„É´ÈÅ∏Êäû„ÇíÂâäÈô§ (Ë¶Å‰ª∂Â§âÊõ¥)
        # selected_model = st.selectbox("‰ΩøÁî®„Åô„Çã„É¢„Éá„É´„ÇíÈÅ∏Êäû", AVAILABLE_MODELS, index=0)
        
        if st.button("‰ΩúÊàê"):
            # „É¢„Éá„É´ÈÅ∏Êäû„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂâäÈô§
            if new_project_name:
                # Âêå„ÅòÂêçÂâç„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åå„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
                existing_project = db.query(Project).filter(Project.name == new_project_name).first()
                if not existing_project:
                    new_project = Project(
                        name=new_project_name, 
                        system_prompt=new_system_prompt,
                        # model_name=selected_model # „É¢„Éá„É´ÈÅ∏Êäû„ÇíÂâäÈô§
                    )
                    db.add(new_project)
                    db.commit()
                    db.refresh(new_project) # ID„ÇíÂèñÂæó„Åô„Çã„Åü„ÇÅ„Å´„É™„Éï„É¨„ÉÉ„Ç∑„É•
                    st.session_state.current_project_id = new_project.id # ‰ΩúÊàê„Åó„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈÅ∏ÊäûÁä∂ÊÖã„Å´„Åô„Çã
                    st.session_state.current_thread_id = None # Êñ∞Ë¶è„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêÊôÇ„ÅØ„Çπ„É¨„ÉÉ„ÉâÊú™ÈÅ∏Êäû
                    st.sidebar.success(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà '{new_project_name}' „Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ")
                    st.rerun() # „Çµ„Ç§„Éâ„Éê„Éº„ÅÆË°®Á§∫„ÇíÊõ¥Êñ∞
                else:
                    st.sidebar.error("Âêå„ÅòÂêçÂâç„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇ")
            else:
                # „É°„ÉÉ„Çª„Éº„Ç∏„Çí‰øÆÊ≠£
                st.sidebar.warning("„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

    # --- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂâäÈô§„Éú„Çø„É≥ --- („Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà)
    if st.session_state.current_project_id:
        st.sidebar.divider()
        st.sidebar.subheader("„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊìç‰Ωú")
        current_project_name = next((p.name for p in projects if p.id == st.session_state.current_project_id), "‰∏çÊòé„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà")
        if st.sidebar.button(f"üóëÔ∏è '{current_project_name}' „ÇíÂâäÈô§", key="delete_project_button"):
            st.session_state.confirm_delete_project = True # Á¢∫Ë™çÁä∂ÊÖã„Çí„Çª„ÉÉ„Éà
            st.rerun() # Á¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åô„Çã„Åü„ÇÅ„Å´ÂÜçÂÆüË°å

        # Á¢∫Ë™ç„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫„Å®ÊúÄÁµÇÂâäÈô§Âá¶ÁêÜ
        if st.session_state.get("confirm_delete_project", False):
            st.sidebar.warning(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà '{current_project_name}' „ÇíÂâäÈô§„Åô„Çã„Å®„ÄÅÈñ¢ÈÄ£„Åô„ÇãÂÖ®„Å¶„ÅÆ„Çπ„É¨„ÉÉ„Éâ„Å®„É°„ÉÉ„Çª„Éº„Ç∏„ÇÇÂâäÈô§„Åï„Çå„Åæ„Åô„ÄÇÊú¨ÂΩì„Å´ÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü")
            col1, col2 = st.sidebar.columns(2)
            if col1.button("„ÅØ„ÅÑ„ÄÅÂâäÈô§„Åó„Åæ„Åô", key="confirm_delete_yes"):
                delete_success = delete_project(db, st.session_state.current_project_id)
                if delete_success:
                    st.sidebar.success(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà '{current_project_name}' „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ")
                    st.session_state.current_project_id = None
                    st.session_state.current_thread_id = None
                    st.session_state.confirm_delete_project = False # Á¢∫Ë™çÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                    st.rerun() # UI Êõ¥Êñ∞
                else:
                    st.sidebar.error("„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
                    st.session_state.confirm_delete_project = False # Á¢∫Ë™çÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                    st.rerun()
            if col2.button("„Ç≠„É£„É≥„Çª„É´", key="confirm_delete_no"):
                st.session_state.confirm_delete_project = False # Á¢∫Ë™çÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                st.rerun()

    # --- „Çπ„É¨„ÉÉ„ÉâÁÆ°ÁêÜ --- („Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫)
    if st.session_state.current_project_id:
        st.sidebar.header("„Çπ„É¨„ÉÉ„Éâ")
        current_project_id = st.session_state.current_project_id
        threads = db.query(Thread).filter(Thread.project_id == current_project_id).order_by(Thread.updated_at.desc()).all()
        thread_names = [t.name for t in threads]
        thread_map = {t.name: t.id for t in threads}

        # Êñ∞Ë¶è„Çπ„É¨„ÉÉ„Éâ‰ΩúÊàê„Éú„Çø„É≥
        if st.sidebar.button("Êñ∞„Åó„ÅÑ„Çπ„É¨„ÉÉ„Éâ„ÇíÈñãÂßã"): 
            new_thread = Thread(project_id=current_project_id, name=f"Êñ∞„Åó„ÅÑ„Çπ„É¨„ÉÉ„Éâ {len(threads) + 1}") # ‰ªÆ„ÅÆÂêçÂâç
            db.add(new_thread)
            db.commit()
            db.refresh(new_thread)
            st.session_state.current_thread_id = new_thread.id
            st.sidebar.success("Êñ∞„Åó„ÅÑ„Çπ„É¨„ÉÉ„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºÅ")
            st.rerun()

        # „Çπ„É¨„ÉÉ„Éâ‰∏ÄË¶ß„Å®ÈÅ∏Êäû„ÉªÂâäÈô§„ÉªÁ∑®ÈõÜ
        selected_thread_id = st.session_state.current_thread_id
        for thread in threads:
            # Expander „Çí‰Ωø„Å£„Å¶Á∑®ÈõÜUI„ÇíÈö†„Åô
            with st.sidebar.expander(f"{thread.name} ({db.query(func.count(Message.id)).filter(Message.thread_id == thread.id).scalar() or 0} msgs)", expanded=False):
                new_name = st.text_input("Êñ∞„Åó„ÅÑ„Çπ„É¨„ÉÉ„ÉâÂêç", value=thread.name, key=f"edit_thread_name_{thread.id}")
                if st.button("ÂêçÂâç„Çí‰øùÂ≠ò", key=f"save_thread_name_{thread.id}"):
                    if new_name.strip():
                        update_success = update_thread_name(db, thread.id, new_name.strip())
                        if update_success:
                            st.success("ÂêçÂâç„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ")
                            # Expander „ÇíÈñâ„Åò„Çã„Åã„ÄÅrerun „ÅßÂÜçÊèèÁîª
                            st.rerun()
                        else:
                            st.error("ÂêçÂâç„ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
                    else:
                        st.warning("„Çπ„É¨„ÉÉ„ÉâÂêç„ÅØÁ©∫„Å´„Åß„Åç„Åæ„Åõ„Çì„ÄÇ")

            # Expander „ÅÆÂ§ñ„Å´ÈÅ∏Êäû„ÉªÂâäÈô§„Éú„Çø„É≥„ÇíÈÖçÁΩÆ („É¨„Ç§„Ç¢„Ç¶„ÉàË™øÊï¥„ÅåÂøÖË¶Å„Åã„ÇÇ)
            col1, col2 = st.sidebar.columns([0.8, 0.2])
            with col1:
                # „Çπ„É¨„ÉÉ„ÉâÈÅ∏Êäû„Éú„Çø„É≥ („Éó„É©„Ç§„Éû„É™/„Çª„Ç´„É≥„ÉÄ„É™„ÅßË¶ãÂàÜ„Åë„Çã)
                if st.button(f"Èñã„Åè: {thread.name}", key=f"select_thread_button_{thread.id}", use_container_width=True,
                              type="primary" if thread.id == selected_thread_id else "secondary"):
                    st.session_state.current_thread_id = thread.id
                    st.session_state.show_search_results = False # Ê§úÁ¥¢Ë°®Á§∫Ëß£Èô§
                    st.rerun()
            with col2:
                # „Çπ„É¨„ÉÉ„ÉâÂâäÈô§„Éú„Çø„É≥
                if st.button("üóëÔ∏è", key=f"delete_thread_button_{thread.id}", help="„Åì„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÇíÂâäÈô§„Åó„Åæ„Åô"):
                    delete_success = delete_thread(db, thread.id)
                    if delete_success:
                        st.success(f"„Çπ„É¨„ÉÉ„Éâ '{thread.name}' „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ")
                        if st.session_state.current_thread_id == thread.id:
                            st.session_state.current_thread_id = None
                        st.rerun()
                    else:
                        st.error(f"„Çπ„É¨„ÉÉ„Éâ '{thread.name}' „ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")

            st.sidebar.divider() # „Çπ„É¨„ÉÉ„ÉâÈñì„ÅÆÂå∫Âàá„ÇäÁ∑ö

    # --- ‚òÖÊ§úÁ¥¢Ê©üËÉΩ --- 
    st.sidebar.header("Ê§úÁ¥¢")
    search_query = st.sidebar.text_input("„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊ§úÁ¥¢", key="search_input")
    if st.sidebar.button("Ê§úÁ¥¢ÂÆüË°å", key="search_button"):
        if search_query:
            db_session = SessionLocal()
            try:
                results = search_messages(db_session, search_query)
                # ÁµêÊûú„Çí‰øùÂ≠òÔºà„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„Å®„Çπ„É¨„ÉÉ„ÉâÂêç„ÇÇÂèñÂæó„Åó„Å¶‰ªòÂä†„Åô„ÇãÔºâ
                detailed_results = []
                for msg in results:
                    # Èñ¢ÈÄ£„Åô„Çã„Çπ„É¨„ÉÉ„Éâ„Å®„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÂèñÂæó
                    # N+1 ÂïèÈ°å„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„ÄÅÊú¨Êù•„ÅØ JOIN „ÅßÂèñÂæó„Åô„ÇãÊñπ„ÅåÂäπÁéáÁöÑ
                    thread = db_session.query(Thread).filter(Thread.id == msg.thread_id).first()
                    project = db_session.query(Project).filter(Project.id == thread.project_id).first() if thread else None
                    detailed_results.append({
                        "message": msg,
                        "thread_name": thread.name if thread else "‰∏çÊòé„Å™„Çπ„É¨„ÉÉ„Éâ",
                        "project_name": project.name if project else "‰∏çÊòé„Å™„Éó„É≠„Ç∏„Çß„ÇØ„Éà",
                        "project_id": thread.project_id if thread else None,
                        "thread_id": msg.thread_id
                    })
                st.session_state.search_results = detailed_results
                st.session_state.show_search_results = True # Ê§úÁ¥¢ÁµêÊûúË°®Á§∫„É¢„Éº„Éâ„Å´
                st.session_state.current_thread_id = None # Ê§úÁ¥¢ÊôÇ„ÅØÁâπÂÆö„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÇíÈÅ∏ÊäûËß£Èô§
                logging.debug(f"Ê§úÁ¥¢„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü: Query='{search_query}', Results={len(results)}")
                st.rerun() # „É°„Ç§„É≥„Ç®„É™„Ç¢„ÅÆË°®Á§∫„ÇíÊõ¥Êñ∞„Åô„Çã„Åü„ÇÅ
            finally:
                db_session.close()
        else:
            st.sidebar.warning("Ê§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            st.session_state.show_search_results = False # Ê§úÁ¥¢„É¢„Éº„ÉâËß£Èô§
            st.session_state.search_results = None

    # Ê§úÁ¥¢ÁµêÊûúË°®Á§∫‰∏≠„ÅØ„ÉÅ„É£„ÉÉ„ÉàË°®Á§∫„Å´Êàª„Çã„Éú„Çø„É≥„ÇíÂá∫„Åô
    if st.session_state.show_search_results:
        if st.sidebar.button("„ÉÅ„É£„ÉÉ„Éà„Å´Êàª„Çã", key="back_to_chat_button"):
            st.session_state.show_search_results = False
            st.session_state.search_results = None
            # ÂâçÂõûÈÅ∏Êäû„Åó„Å¶„ÅÑ„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà/„Çπ„É¨„ÉÉ„Éâ„Å´Êàª„Åô„Åã„ÄÅ„ÅÇ„Çã„ÅÑ„ÅØÂçò„Å´„ÇØ„É™„Ç¢„Åô„Çã„Åã
            # „Åì„Åì„Åß„ÅØ„ÇØ„É™„Ç¢„Åó„Å¶„ÄÅ„É¶„Éº„Ç∂„Éº„Å´ÂÜçÂ∫¶ÈÅ∏Êäû„Åï„Åõ„Çã
            # st.session_state.current_project_id = ... (‰øùÊåÅ„Åó„Å¶„ÅÑ„ÅüÂ†¥Âêà)
            # st.session_state.current_thread_id = ... (‰øùÊåÅ„Åó„Å¶„ÅÑ„ÅüÂ†¥Âêà)
            st.rerun()
    # --- Ê§úÁ¥¢Ê©üËÉΩ„Åì„Åì„Åæ„Åß ---

finally:
    db.close()

# --- „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ„Ç®„É™„Ç¢ --- 

# Ê§úÁ¥¢ÁµêÊûúË°®Á§∫„É¢„Éº„Éâ„Åã„Å©„ÅÜ„Åã„ÅßË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà„Çã
if st.session_state.show_search_results:
    st.title("Ê§úÁ¥¢ÁµêÊûú")
    results = st.session_state.search_results
    if results:
        st.write(f"{len(results)} ‰ª∂„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ")
        for result in results:
            msg = result["message"]
            with st.expander(f"**{result['project_name']}** / **{result['thread_name']}** ({msg.created_at.strftime('%Y-%m-%d %H:%M')}) - {msg.role}"):
                st.markdown(f"> {msg.content[:100]}..." if len(msg.content) > 100 else f"> {msg.content}") # „Éó„É¨„Éì„É•„Éº
                # st.markdown(msg.content) # ÂÖ®ÊñáË°®Á§∫
                # Ê§úÁ¥¢ÁµêÊûú„Åã„ÇâË©≤ÂΩì„Çπ„É¨„ÉÉ„Éâ„Å´„Ç∏„É£„É≥„Éó„Åô„Çã„Éú„Çø„É≥
                if st.button(f"„Åì„ÅÆ„Çπ„É¨„ÉÉ„Éâ„ÇíÈñã„Åè ({result['thread_name']})", key=f"goto_thread_{msg.id}"):
                    st.session_state.current_project_id = result['project_id']
                    st.session_state.current_thread_id = result['thread_id']
                    st.session_state.show_search_results = False # „ÉÅ„É£„ÉÉ„ÉàË°®Á§∫„É¢„Éº„Éâ„Å´Êàª„Åô
                    st.session_state.search_results = None
                    st.rerun()
    else:
        st.info("Ê§úÁ¥¢Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„Çã„É°„ÉÉ„Çª„Éº„Ç∏„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")

else:
    # --- ÈÄöÂ∏∏„ÅÆ„ÉÅ„É£„ÉÉ„ÉàË°®Á§∫ --- 
    st.title("Chat")

    if st.session_state.current_project_id:
        db = SessionLocal()
        try:
            current_project = db.query(Project).filter(Project.id == st.session_state.current_project_id).first()
            if current_project:
                st.subheader(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà: {current_project.name}")
                
                if st.session_state.current_thread_id:
                    current_thread = db.query(Thread).filter(Thread.id == st.session_state.current_thread_id).first()
                    if current_thread:
                        st.write(f"„Çπ„É¨„ÉÉ„Éâ: {current_thread.name}")

                        # --- „É¢„Éá„É´ÈÅ∏Êäû („ÉÅ„É£„ÉÉ„Éà„Ç®„É™„Ç¢‰∏äÈÉ®) ---
                        # „Çª„ÉÉ„Ç∑„Éß„É≥„Çπ„ÉÜ„Éº„Éà„Å´ÈÅ∏Êäû„É¢„Éá„É´„Çí‰øùÂ≠ò
                        if 'selected_model' not in st.session_state:
                            st.session_state.selected_model = AVAILABLE_MODELS[0] # „Éá„Éï„Ç©„É´„Éà
                        
                        st.session_state.selected_model = st.selectbox(
                            "‰ΩøÁî®„Åô„Çã„É¢„Éá„É´:", 
                            AVAILABLE_MODELS,
                            index=AVAILABLE_MODELS.index(st.session_state.selected_model) if st.session_state.selected_model in AVAILABLE_MODELS else 0,
                            key="model_selector_main"  # <-- ‰∏ÄÊÑè„Å™„Ç≠„Éº„ÇíËøΩÂä†
                        )

                        # --- „ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„ÅÆË°®Á§∫ ---
                        messages = db.query(Message).filter(Message.thread_id == current_thread.id).order_by(Message.created_at).all()
                        for msg in messages:
                            with st.chat_message(msg.role):
                                st.markdown(msg.content) # „Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Å®„Åó„Å¶Ë°®Á§∫

                        # --- ‚òÖ‚òÖ‚òÖ „ÉÅ„É£„ÉÉ„ÉàÂÖ•Âäõ„Å®ÂæåÁ∂öÂá¶ÁêÜ„ÇíÂæ©ÂÖÉ ‚òÖ‚òÖ‚òÖ ---
                        if prompt := st.chat_input("„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"):
                            # 1. „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„ÄÅDB„Å´‰øùÂ≠ò
                            with st.chat_message("user"):
                                st.markdown(prompt)
                            
                            user_message = Message(thread_id=current_thread.id, role="user", content=prompt)
                            db.add(user_message)
                            
                            # „Çπ„É¨„ÉÉ„Éâ„ÅÆÊúÄÁµÇÊõ¥Êñ∞Êó•ÊôÇ„ÇíÊõ¥Êñ∞
                            current_thread.updated_at = datetime.datetime.utcnow()
                            db.add(current_thread)
                            
                            db.commit()

                            # --- ‚òÖ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç®„ÇØ„Çπ„Éù„Éº„Éà („É¶„Éº„Ç∂„Éº) ---
                            export_message_to_markdown(
                                project_name=current_project.name,
                                thread_id=current_thread.id,
                                thread_name=current_thread.name,
                                role="user",
                                content=prompt
                            )
                            # --- ‚òÖ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åì„Åì„Åæ„Åß ---

                            # 2. Gemini API Âëº„Å≥Âá∫„ÅóÊ∫ñÂÇô
                            #    - Â±•Ê≠¥„Çí API Áî®„ÅÆÂΩ¢Âºè„Å´Â§âÊèõ („Ç∑„Çπ„ÉÜ„É†„Éó„É≠„É≥„Éó„Éà„ÅØÂà•ÈÄîÊ∏°„Åô)
                            history_for_api = []
                            for m in messages:
                                try:
                                    # ÂΩπÂâ≤(role)„Å´Âøú„Åò„Å¶ Content „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
                                    # DB„ÅÆ 'assistant' „Çí API „ÅÆ 'model' „Å´Â§âÊèõ
                                    api_role = 'model' if m.role == 'assistant' else m.role
                                    # parts „ÅØ„É™„Çπ„Éà„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅPart „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÁîüÊàê
                                    # Part.from_text „Åß„Ç®„É©„Éº„ÅåÂá∫„Åü„Åü„ÇÅ Part(text=...) „Çí‰ΩøÁî®
                                    history_for_api.append(types.Content(role=api_role, parts=[types.Part(text=m.content)]))
                                except ValueError as e:
                                    st.error(f"Â±•Ê≠¥„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Ç®„É©„Éº (ID: {m.id}, Role: {m.role}): {e}")
                                    continue 
                            
                            # ÊúÄÊñ∞„ÅÆ„É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí Content „Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å®„Åó„Å¶ËøΩÂä† (role „ÅØ 'user' „ÅßÁ¢∫ÂÆö)
                            try:
                                # Part.from_text „Åß„Ç®„É©„Éº„ÅåÂá∫„Åü„Åü„ÇÅ Part(text=...) „Çí‰ΩøÁî®
                                history_for_api.append(types.Content(role="user", parts=[types.Part(text=prompt)]))
                            except ValueError as e:
                                st.error(f"„É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Ç®„É©„Éº: {e}")
                                db.rollback() 
                                st.stop()

                            # 3. Gemini API Âëº„Å≥Âá∫„Åó„Å®ÂøúÁ≠îË°®Á§∫ („Çπ„Éà„É™„Éº„Éü„É≥„Ç∞)
                            try:
                                # Client „ÅÆÂàùÊúüÂåñ„ÇíÂ§âÊõ¥ (ÂºïÊï∞„Å™„Åó)
                                client = GeminiClient()

                                # --- „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ËøΩÂä† ---
                                logging.debug(f"Project ID: {current_project.id}, Thread ID: {current_thread.id}")
                                logging.debug(f"Selected Model: {st.session_state.selected_model}")
                                logging.debug(f"System Prompt: {current_project.system_prompt}")
                                logging.debug(f"History for API (first 5 items): {history_for_api[:5]}") # ÂÖ®ÈÉ®„ÅØÂ§ö„ÅÑ„ÅÆ„ÅßÂÖàÈ†≠5‰ª∂
                                logging.debug(f"Total history items for API: {len(history_for_api)}")
                                # --- „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞„Åì„Åì„Åæ„Åß ---

                                with st.chat_message("assistant"):
                                    # „Çπ„Éà„É™„Éº„Éü„É≥„Ç∞ÂøúÁ≠î„ÇíË°®Á§∫„Åô„Çã„Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Éº
                                    response_placeholder = st.empty()
                                    full_response = ""
                                    # „É°„ÇΩ„ÉÉ„ÉâÂëº„Å≥Âá∫„Åó„Å´ session_state „Åã„Çâ„É¢„Éá„É´Âêç„ÇíÂèñÂæó„Åó„Å¶Ê∏°„Åô
                                    stream = client.generate_content_stream(
                                        model_name=st.session_state.selected_model, # ÈÅ∏Êäû„Åï„Çå„Åü„É¢„Éá„É´„Çí‰ΩøÁî®
                                        history=history_for_api, 
                                        system_prompt=current_project.system_prompt
                                    )
                                    for chunk in stream:
                                        full_response += chunk
                                        response_placeholder.markdown(full_response + "‚ñå") 
                                    response_placeholder.markdown(full_response) 

                                # 4. „Ç¢„Ç∑„Çπ„Çø„É≥„Éà„ÅÆÂøúÁ≠î„ÇíDB„Å´‰øùÂ≠ò
                                assistant_message = Message(thread_id=current_thread.id, role="assistant", content=full_response)
                                db.add(assistant_message)
                                
                                # „Çπ„É¨„ÉÉ„Éâ„ÅÆÊúÄÁµÇÊõ¥Êñ∞Êó•ÊôÇ„ÇíÂÜçÂ∫¶Êõ¥Êñ∞
                                current_thread.updated_at = datetime.datetime.utcnow()
                                db.add(current_thread)

                                db.commit()

                                # --- ‚òÖ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç®„ÇØ„Çπ„Éù„Éº„Éà („Ç¢„Ç∑„Çπ„Çø„É≥„Éà) ---
                                export_message_to_markdown(
                                    project_name=current_project.name,
                                    thread_id=current_thread.id,
                                    thread_name=current_thread.name,
                                    role="assistant",
                                    content=full_response
                                )
                                # --- ‚òÖ„Éû„Éº„ÇØ„ÉÄ„Ç¶„É≥„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åì„Åì„Åæ„Åß ---

                            except Exception as e:
                                st.error(f"Gemini API „ÅÆÂëº„Å≥Âá∫„Åó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
                        # --- ‚òÖ‚òÖ‚òÖ „ÉÅ„É£„ÉÉ„ÉàÂÖ•ÂäõÂæ©ÂÖÉ„Åì„Åì„Åæ„Åß ‚òÖ‚òÖ‚òÖ ---

                    else:
                        st.warning("ÈÅ∏Êäû„Åï„Çå„Åü„Çπ„É¨„ÉÉ„Éâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ")
                        st.session_state.current_thread_id = None # „É™„Çª„ÉÉ„Éà
                else:
                    st.info("„Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„Çπ„É¨„ÉÉ„Éâ„ÇíÈÅ∏Êäû„Åæ„Åü„ÅØ‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            else:
                st.warning("ÈÅ∏Êäû„Åï„Çå„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈÅ∏Êäû„Åæ„Åü„ÅØ‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                st.session_state.current_project_id = None
                st.session_state.current_thread_id = None
        finally:
            db.close()
    else:
        st.info("„Çµ„Ç§„Éâ„Éê„Éº„Åã„Çâ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÈÅ∏Êäû„Åæ„Åü„ÅØ‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
