import base64
import os
from google import genai
from google.genai import types


def generate():
    client = genai.Client(
        api_key=os.environ.get("GEMINI_API_KEY"),
    )

    model = "gemini-2.5-pro-exp-03-25"
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""PythonでGUIアプリを作るときのライブラリの候補をあげてください。
シンプルなチャットと履歴の管理ができる画面を作りたいです。その他設定画面を少し。
要件に会うものを探して提案してください。
"""),
            ],
        ),
        types.Content(
            role="model",
            parts=[
                types.Part.from_text(text="""ユーザーはPythonでGUIアプリを作成するためのライブラリを探しています。
特に、シンプルなチャット画面、履歴管理画面、設定画面の作成に適したライブラリを知りたいようです。

ユーザーの要件を満たすライブラリを探すために、以下の検索クエリを生成します。

1.  **Python GUIライブラリ 比較** (基本的な比較情報を得るため)
2.  **Python GUI チャットアプリ 開発** (チャットアプリ開発に適したライブラリを探すため)
3.  **Python GUI おすすめ ライブラリ** (一般的なおすすめ情報を得るため)
4.  **Python GUI library for chat application** (英語での検索も追加)

これらのクエリで、Pythonの主要なGUIライブラリと、それぞれの特徴、特にチャットアプリのようなインターフェース構築に適しているかどうかの情報を収集します。

収集した情報から、以下の点を考慮してライブラリを比較・評価します。

*   **学習コスト**: 初心者でも比較的容易に扱えるか。
*   **機能**: チャット画面、履歴表示、設定画面に必要なウィジェット（テキスト入力、ボタン、リスト表示、タブなど）が揃っているか。
*   **カスタマイズ性**: デザインやレイアウトをどの程度自由に調整できるか。
*   **クロスプラットフォーム対応**: Windows, macOS, Linuxなど、複数のOSで動作するか。
*   **コミュニティとドキュメント**: 情報収集や問題解決がしやすいか。

最終的に、ユーザーの要件に最も合致すると思われるライブラリをいくつか候補として挙げ、それぞれのメリット・デメリットを説明します。"""),
                types.Part.from_text(text="""Pythonでシンプルなチャット画面、履歴管理画面、設定画面を持つGUIアプリケーションを作成する際に候補となるライブラリをいくつかご紹介します。それぞれの特徴を踏まえ、要件に合ったものを選んでみてください。

PythonでGUIアプリを作成するためのライブラリはいくつかありますが、チャット、履歴管理、設定画面といった要件を踏まえると、以下のものが候補として挙げられます。

**1. Tkinter (ティーキンター)**

*   **特徴:**
    *   Pythonに標準で組み込まれているライブラリなので、追加のインストールが不要ですぐに使い始められます [1, 5, 4, 15]。
    *   シンプルで軽量なため、小規模なツールやプロトタイプの作成に向いています [5, 4]。
    *   基本的なウィジェット（ボタン、テキスト入力、ラベルなど）は揃っており、チャット画面のような基本的なUIは構築可能です [8, 15]。
    *   日本語の情報や文献が比較的豊富です [1]。
*   **考慮点:**
    *   デザインの自由度は他のライブラリに比べて低めです [5]。モダンな見た目にするには工夫が必要です。
    *   複雑なUIや高度な機能の実装には向かない場合があります [5]。

**2. PyQt (パイキュート) / PySide (パイサイド)**

*   **特徴:**
    *   QtというC++で書かれた強力なGUIフレームワークのPython版です [4, 5]。PyQtとPySideはほぼ同じ機能ですが、ライセンス形態が異なります（PyQtは商用利用時にライセンス料が必要な場合があります）[5]。
    *   非常に高機能で、カスタマイズ性が高いのが特徴です [5]。モダンで美しいデザインのGUIを作成しやすいと評価されています [4]。
    *   豊富なウィジェットや開発ツールが提供されており、複雑なアプリケーション開発にも対応できます [5, 4]。
    *   クロスプラットフォーム対応で、異なるOSでも同じような見た目を実現できます [5]。ChatGPTを利用したデスクトップアプリ開発例もあります [10]。
*   **考慮点:**
    *   比較的高機能な分、学習コストはTkinterより高めです [5]。
    *   外部ライブラリなので、別途インストールが必要です [10]。

**3. Kivy (キビー)**

*   **特徴:**
    *   モダンなUIデザイン、特にマルチタッチ操作を活かしたアプリケーション開発に適しています [1, 5, 4]。
    *   Windows, macOS, Linuxに加え、iOSやAndroidなどのモバイルプラットフォームにも対応しているクロスプラットフォーム性が高いライブラリです [4]。
    *   独自のKV言語を使ってUIを記述でき、これにより開発を高速化できる場合があります [4]。
*   **考慮点:**
    *   デスクトップアプリとしては、一般的なネイティブアプリとは少し異なる見た目になる可能性があります [5]。
    *   情報量はTkinterやPyQtに比べると少ないかもしれません。

**4. PySimpleGUI (パイシンプルグイ)**

*   **特徴:**
    *   Tkinter、PyQt、wxPythonなどを内部的に利用し、より少ないコード量で簡単にGUIを作成できるように設計されたライブラリです [2]。
    *   学習コストが低く、初心者でも比較的容易に扱えます。
    *   シンプルなチャット画面や設定画面であれば、手早く開発を進められる可能性があります。
*   **考慮点:**
    *   他のライブラリをラップしているため、細かいカスタマイズや複雑な挙動の実装には限界がある場合があります。

**5. Streamlit (ストリームリット)**

*   **特徴:**
    *   元々はデータサイエンス向けのWebアプリケーションフレームワークですが、チャットUIを作成するためのコンポーネント (`st.chat_message`, `st.chat_input`) が用意されています [11]。
    *   少ないPythonコードでインタラクティブなWebアプリ（チャットボットなど）を素早く構築できます [11, 16]。
    *   チャット履歴の管理もSession Stateという機能を使って比較的容易に実装できます [11]。
*   **考慮点:**
    *   厳密にはデスクトップアプリではなく、Webブラウザ上で動作するアプリになります。
    *   デザインの自由度は高くありませんが、シンプルなチャットインターフェースであれば十分です。

**どれを選ぶか？**

*   **手軽さ・学習コスト重視なら:** **Tkinter** または **PySimpleGUI**。特にTkinterは標準ライブラリなので、すぐに試せます [1, 5]。PySimpleGUIはより少ないコードで書ける可能性があります [2]。
*   **デザイン性・高機能性重視なら:** **PyQt/PySide**。モダンな見た目や複雑な機能が必要な場合におすすめです [4, 5]。
*   **Webアプリとして開発したい、データ連携も考慮するなら:** **Streamlit**。チャットUIの構築に特化した機能があり、手早く開発できます [11]。
*   **モバイル対応も視野に入れるなら:** **Kivy**。マルチタッチなど、モバイルに適した機能が豊富です [4]。

今回の要件である「シンプルなチャット」「履歴管理」「設定画面」であれば、**Tkinter** や **PySimpleGUI** でも十分に実現可能と思われます。もし、より洗練されたデザインや将来的な機能拡張を考えるなら、**PyQt/PySide** も有力な候補になります。StreamlitはWebアプリという形態が許容できれば、チャット機能の実装が非常に楽になるでしょう [11, 16]。

まずはTkinterで簡単な画面を作ってみて、GUI開発の感覚を掴んでから他のライブラリを検討するのも良い方法です。"""),
            ],
        ),
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(text="""INSERT_INPUT_HERE"""),
            ],
        ),
    ]
    tools = [
        types.Tool(google_search=types.GoogleSearch())
    ]
    generate_content_config = types.GenerateContentConfig(
        tools=tools,
        response_mime_type="text/plain",
        system_instruction=[
            types.Part.from_text(text="""あなたはWeb検索エージェントです。
1. ユーザーの質問の意図を分析します。
2. 何を知りたいのかよく分析します。
3. ユーザーの知りたいこと検索します
4. 検索から分かったことをわかりやすくまとめます。"""),
        ],
    )

    for chunk in client.models.generate_content_stream(
        model=model,
        contents=contents,
        config=generate_content_config,
    ):
        print(chunk.text, end="")

if __name__ == "__main__":
    generate()
